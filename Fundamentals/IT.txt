IT Fundamentals
    Compute Devices-Common Components
        we use compute divices in our dialy  life
        examples in lnclude: 
            Mobile phones,Laptops,Ipads,Tablets,Desktop.

            they have different use cases, but in principle they use common components.
    
    in principle computing devices use common cpmponenets including: 
        CPU 
        RAM 
        Storage(HDD or SSD)
        Network Card/interface (NFC): Connectsthe computing device to the Outside world. Can wriells or wired
        Monitors: Used to read/viewthe desired Data.
        Graphic CPU (or  GCPU) cards : used to accelerate Video operations on the compute device.



    Physical Servers
        A Physical server is basically a powerfulcomputer with:
            a Good -sized memory (RAM)
            one or more CPU
            one or more Disk drives to store operating system and data, 
            one or more Network interface, and 
            one or more GCPUs.

            We need to install an operating system and then we can install one or more applications on the server.
            servers can support  10s, 100s, or 1000s of users because of their high specifications.

    Compute Components - Units
        CPU speed is measured in GHz
        memory and Storage are measured in Giga Bytes or tera Bytes
        Network ingerface Card speed is measured in Mega bits/Second (Mbps) or Giga bits/second (Gbps).


    Virtualization
        introduction to Virtualization
            Virtualization allows us to virtually divide a physical server into multiple virtual Servers -and multiple operating systems and applications - on a single server. 
            Each virtual machine is isolated.
            The hypervisor uses virural instances of the hardware to createthe virural machines (VMs).
            We can take a snppshot of the VM (a backup).


                physical server                                     Virtualization 

                                                                    VM | VM VM
                application                                         Hypervisors
                windows OS                                          windows OS
                hardware                                            hardware                                 
        
        Virtualization Components
                               virural machine 1                                                           Virtual machine N
            -----------------------------------------------------------                 -----------------------------------------------------------                                                                                                          
            |                  App     App     App                    |                 |                  App     App     App                    |
            |                       Guest OS                          |                 |                       Guest OS                          |
            |            vCPU vMemory VDissk vNetwork card            |                 |            vCPU vMemory VDissk vNetwork card            |                                                                         
            |                      Hypervisor                         |                 |                      Hypervisor                         |                                                         
            |             CPU memory Disk Network card                |                 |             CPU memory Disk Network card                |                                                                         
            |                    physical server                      |                 |                    physical server                      |                                                                 
            -----------------------------------------------------------                 -----------------------------------------------------------                                                    
        
    oversubscription : Overbooking, overselling, or overselling is the sale of a good or service in a quantity that exceeds the actual quantity.

    introduction to (web) application
        client-Server (Web) applications
            Webapplications include websites, e-commerce websites, or any application accessible over the public internet! 
            The application components are deployed to server(s) 

                Web client                                       Web Server
                            The client initiates the request
                            ----------------------------------> 

                            The server processes the request 
                            and sendes a response
                            <----------------------------------

    introduction to Data Centers
        Where Do We Place The Serves That Host The Applications
        
        In Traditional IT, the servers adn applications are hosted in client spevidic, purpose-designed IT data centers (Separate physical locations or ON-permiese).

        Data Center Servers ARe Placed In Racks
            A server is basically a powerful Cpmputer with Good-sized memory,CPU(s),Diskdrives to storte operating System and data, and Network interfaes.


                Racks are physically secured (locked and montitored) <----- Nounted and cabled inside DC  Packs <----- Pack-Mountalbe Servers
                
                RU = 4.4 cm



    introduced to Cloud Computing
        On-permiises Data Centers vs. Cloud

            On-premises / Data Center - All Yours to build nad Operate!(CAPEX Model)


            Cloud - Is A shared Responsibility!(OPEX Model)
                In cloud computing, everthing the customer needs is pre-built and ready for ues, starting from the infrastructure, 
                all the way up to the applications, databases , secureity, storage...etc



        Is Data Center Equivalent To A Cloud?
            A data center infrastructure requires a layer of orchestration and automation to become a Cloud.
            A data Center is a component of a cloud but is not a synonym of a cloud.   

            A Data Center(s) + Automation/Orchestration = Cloud

    cloud Types - prvate,Public & Hybrid Cloud.

        Private vs. Public Cloud
            Public                                          Private
                Resource are publicly shared                Resources are for private use
                Shared / Multi-Tenant infrastructure        For a single customer, or for corporate business unites.
                Internet connectivity primarily used        Connectivity over fiber,private Network and internet
                Best suited for less confidential data      Best suited for confidential data, client private systems.
            
            Hybrid Cloud 
                A Hybrid cloud is a mix of public and on-premises private cloud that is orchestrated to run a single task.

                Is a more complex cloud solution because the organization must Manage multiple platforms.

                suitable for cost effectiveness, backup,disaster recovery, development and testing.

            Multi Cloud
                Is the use of multople cloud computing and storage services in a single hterogeneous architecture.

            Hybrid Cloud & Multi Cloud 
                Hybrid : A Hybrid cloud is a mix of public and on-premises private cloud that is orchestrated to run a single task.
                Multi Cloud :   Is the use of multople cloud computing and storage services in a single hterogeneous architecture.

                Hybrid Multi-Cloud : deployment, Automation, and Orchetsration.
    Cloud Services
        IaaS, Paas,SaaS, xaaS.

         Cloud - as a Service (aaS)Model

                                                (Customer Managed || , Provider Managed ==)
            App                     |        ||        |     ||      |      ||       |       ==        |                          
                                    |        ||        |     ||      |      ||       |       ==        | 
            Data                    |        ||        |     ||      |      ||       |       ==        |                     
                                    |        ||        |     ||      |               |       ==        | 
            Runtime                 |        ||        |     ||      |      ==       |       ==        |                     
                                    |        ||        |     ||      |      ==       |       ==        | 
            Middleware              |        ||        |     ||      |      ==       |       ==        |                     
                                    |        ||        |     ||      |      ==       |       ==        | 
            operating system        |        ||        |     ||      |      ==       |       ==        |                     
                                    |        ||        |             |      ==       |       ==        | 
            Virtualiztion           |        ||        |     ==      |      ==       |       ==        |                     
                                    |        ||        |     ==      |      ==       |       ==        | 
            hardware                |        ||        |     ==      |      ==       |       ==        |             
                                    |        ||        |     ==      |      ==       |       ==        | 
            Storage                 |        ||        |     ==      |      ==       |       ==        |         
                                    |        ||        |     ==      |      ==       |       ==        | 
            Network                 |        ||        |     ==      |      ==       |       ==        |                            

                                        on-premises         Iaas           PaaS             SaaS
DevOps
    introduction to SDLC 

        Software Development Life Cycle (SDLC).
            Software Development Life Cycle (SDLC) is a framework that defines the series of steps used to create Software applications.
            
            the steps help us in dividing the development process into tasks that can be assignend, completed, and measured.

            Benefits of using/follwing the SDLC standard practices:
                • It provides a way to measure and improve the development process.
                • It allows for an accurate analysis of every step in the process.
                • It facilitate faster software delivery and higher software quality.
                • Better user experience (meeting or exceeding customer expectations).
            
            It is critical to ensure tools are in place to automate the different tasks in any software development 
            process to ensure better quality and less bugs or integration issues.

            
                Plan -------->Code -------->Bulld -------->Test -------->Release -------->Deploy -------->Operate
                  ^                                                                                          |
                  |                                                                                          |
                  --------------------------------------------------------------------------------------------

            Software Development Life Cycle(cont.)
                agile and waterfall are two distincitve methodologies of processes to complete projects or work items.

                waterfall 
                    Analyze --> Plan --> Design --> Bulld --> Test --> Deploy
                Agile
                    ------------------------------------------------------------------------------------------------------------------------- 
                    |                                      |                                        |                                        |
                    |Analyze>Plan>Design>Bulld>Test>Deploy |  Analyze>Plan>Design>Bulld>Test>Deploy |  Analyze>Plan>Design>Bulld>Test>Deploy |
                    |                ^           |         |                  ^           |         |                  ^          |          |
                                     -------------         |                  -------------         |                  ------------          |
                    -------------------------------------------------------------------------------------------------------------------------

                waterfall
                    Design --> Code -----> test --> Deploy

                AGILE 
                    Design--->Code->Test->Code->Test->Code->Test->Code->Test->Code->Test--->Deploy

    DevOps
        DevOps is an evolving philosophy and a culture adoption where the team (developers, QA team, and Operations) undertake the software 
        lifecycle responsibilties to ensure better software Development and release /delivery process That is quick and efficient.

        What's DevOps?
            DevOps is a full lifecycle investment.
            DevOps is a team indertaking 
            DevOps enables better software Development & delivery practices.
            DevOps accelerates the lest mile of continuous delivery.
        
        The primary goal of DevOps is to shorten the system development life cycle  while delivering features, fixes, and updates frequently 
        in close alignment with business objectives.
        
        It involves the use of various tools and technologies to automate and streamline processes.


        DevOps vs. Agile
            • Agile is a philosophy about how to develop and deliver software.
                • Agile does more frequent design/code/test phases until we reach the deployment phase.
            • DevOps describes how t continuously deploy code through the use of modern tools and automated processes.

            waterfall
                Design --> Code -----> test --> Deploy

            AGILE 
                Design--->Code->Test->Code->Test->Code->Test->Code->Test->Code->Test--->Deploy
            
            DevOps
                 Design--->Code->Test->Deploy->Code->Test->Deploy->Code->Test->Deploy->Code->Test->Deploy.
                

    introduction to CI/CD Concepts.

        Continuous Integration (CI)
            Continuous Integration (CI) is a DevOps software development practice which automates merging the code commits (integrating the code) 
            from developers into a single shared repository, after which automated builds and tests are conducted.
            • Developers need to push their code to one shared repository and merge it withthe main code without any conflicts or issues.
            • Validation and code testing need to be added to the Cl.
            • The key goal of Cl is to reduce the time taken to test, find, and address issues or software bugs quicker, therefore, improve software development and quality.


        Continuous Delivery / Continuous Deployment (CD)
            Continuous Delivery:
                • It is deploying code changes to a Staging, testing or production environment after the Code build step.
                • The deployment is dependent on the team's plans and decisions for release time,changes need to be released,... etc.
            Continuous Deployment:
                • Changes that passes all Cl stages will be released to production automatically.
                • There's no human intervention, it is a fully automated process.


        Continuous Integration
        Buid --> Test-----------> Staging Deployment 1.Manual(continous Delivery)         ------> Production Deployment.
                                                     2.Automatic(continous Deployment)
        CI/CD Most common tools
            Jenkins 
            GitHub actions
            Gitlab
            argo
            circleci

    DevOps - Do I Need To Be Programmer To Work In DevOps?
        Tasks that require Coding skills in DevOps
            • Communication and collaboration with development teams.
            • Writing automation scripts
            • Writing scripts (using SDKs) to create/manage cloud resources (laC - Alternatives exist such as Terraform)
            • Monitoring and Alerting scripts
            • Implement custom plugins and extensions for the tools
    
    DevOps - Recommended Coding Languages & Scripting Tools
        •Python or Go
            Go is gaining a lot of moment im in DevOps
        • Bash / Powershell
        • Terraform for laC

    Cloud Ntive-overview
        Cloud Native
            Cloud native technologies empower organizations to build and run scalable applications in public, private, and hybrid clouds.
             Features such as containers, service meshes, microservices, immutable infrastructure, and declarative application programming
            interfaces (APls) best illustrate this approach.
                                    Cloud Native Computing Foundation (CNCF)
            • Cloud native is an approach to building and running applicions that exploits the advantages of the cloud computing delivery model.
            • Cloud native development is appropriate for both public and private clouds; it's about how applications are created and deployed, not where.
            • Cloud native development incorporates the concepts of DevOps, continuous delivery, microcorvick and containers
        Cloud Native Applications
            • Cloud native applications are independent services, packaged as self-contained, lightweight containers that are portable and can be scaled (in or out)rapidly based on demand.
            • Cloud native apps are often delivered via a DevOps pipeline that includes continuous integration and continuous delivery (CI/CD) toolchains.

        Infrastructure as Code (IaC)
            • Infrastructure as code (laC) means to manage your IT infrastructure using configuration files.
            • laC is the process of managing and provisioning computer data centers through machine-readable definition files, 
            rather than physical hardware configuration or interactive configuration tools.
            • Terraform and AWS CloudFromation are examples.


            (pulumi in python)
        

        DevOps vs. DevSecOps
            • DevSecOps is a philosophy of integrating security methods into a DevOps process.
            • From the very start of a SDLC, DevSecOps works to make the application secure by introducing a variety of security techniques.